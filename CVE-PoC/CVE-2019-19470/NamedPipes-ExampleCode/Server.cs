using System;
using System.IO;
using System.IO.Pipes;
using System.Runtime.Serialization.Formatters;
using System.Runtime.Serialization.Formatters.Binary;
using System.Text;

namespace ServerPipe
{
    class Program
    {
        static void Main(string[] args)
        {
            // NamedPipe Implementation for Deserialization
            
            using (NamedPipeServerStream pipeServer =
                new NamedPipeServerStream("File Transfer", PipeDirection.InOut))
            {
                Console.WriteLine("File Transfer Named Pipe Stream is ready...");
                Console.Write("Waiting for client connection...");//waiting for any client connections
                pipeServer.WaitForConnection();
                Console.WriteLine("Client connected.");
                try
                {
                    new BinaryFormatter
                    {
                        AssemblyFormat = FormatterAssemblyStyle.Simple
                    }.Deserialize(pipeServer);

                }
                // Catch the IOException that is raised if the pipe is
                // broken or disconnected.
                catch (IOException e)
                {
                    Console.WriteLine("ERROR: {0}", e.Message);
                }
            }
            
            #region workingClient
            /*
            // NamedPipe Implementation for creating object for file transfer

            using (NamedPipeServerStream pipeServer =
                new NamedPipeServerStream("File Transfer", PipeDirection.Out))
            {
                Console.WriteLine("File Transfer Named Pipe Stream is ready...");
                Console.Write("Waiting for client connection...");//waiting for any client connections
                pipeServer.WaitForConnection();
                Console.WriteLine("Client connected.");
                try
                {
                    string strFile = @"C:\tools\NamedPipes\test.txt";

                    using (BinaryWriter writer = new BinaryWriter(pipeServer, Encoding.UTF8, true))
                    {
                        writer.Write("test.txt");
                    }

                    //opening the source file to read bytes
                    using (FileStream fs = File.Open(strFile, FileMode.Open, FileAccess.Read))
                    {
                        fs.CopyTo(pipeServer);
                    }
                }
                // Catch the IOException that is raised if the pipe is
                // broken or disconnected.
                catch (IOException e)
                {
                    Console.WriteLine("ERROR: {0}", e.Message);
                }
            }
         */
            #endregion
        }
    }
}
